using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using NXOpen;

namespace ExcelAutomationApp
{
    public class MainForm : Form
    {
        private Button btnRun;

        public MainForm()
        {
            this.Text = "Excel Automation";
            this.Width = 300;
            this.Height = 200;

            btnRun = new Button();
            btnRun.Text = "Tạo Excel với VBA";
            btnRun.AutoSize = true;
            btnRun.Location = new System.Drawing.Point(50, 50);
            btnRun.Click += BtnRun_Click;
            this.Controls.Add(btnRun);
        }

        private void BtnRun_Click(object sender, EventArgs e)
        {
            try
            {
                // 1. Lấy thư mục từ NXOpen (đảm bảo NXOpen đã được cấu hình và file part đang mở)
                Session theSession = Session.GetSession();
                string partFullPath = theSession.Parts.Work.FullPath;
                string folderPath = Path.GetDirectoryName(partFullPath);

                // 2. Đặt tên file Excel (dạng macro-enabled .xlsm)
                string fileName = "BOM List.xlsm";
                string filePath = Path.Combine(folderPath, fileName);

                // 3. Gọi phương thức tạo file Excel, chèn VBA và chạy macro
                CreateExcelWithVBA(filePath);

                MessageBox.Show("File Excel đã được tạo và macro đã chạy thành công.", "Thông báo",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Tạo file Excel macro-enabled, chèn mã VBA và chạy macro bằng cách sử dụng late binding (COM).
        /// </summary>
        /// <param name="filePath">Đường dẫn file Excel sẽ được lưu</param>
        private void CreateExcelWithVBA(string filePath)
        {
            // Lấy type của Excel Application qua ProgID
            Type excelType = Type.GetTypeFromProgID("Excel.Application");
            if (excelType == null)
                throw new Exception("Không tìm thấy Excel. Hãy đảm bảo rằng Excel đã được cài đặt.");

            // Tạo instance của Excel Application
            object excelApp = Activator.CreateInstance(excelType);

            // Ẩn Excel trong quá trình xử lý
            excelType.InvokeMember("Visible", System.Reflection.BindingFlags.SetProperty, null, excelApp, new object[] { false });

            // Tạo workbook mới
            object workbooks = excelType.InvokeMember("Workbooks", System.Reflection.BindingFlags.GetProperty, null, excelApp, null);
            object workbook = workbooks.GetType().InvokeMember("Add", System.Reflection.BindingFlags.InvokeMethod, null, workbooks, null);

            // --- Chèn mã VBA ---
            // Lấy VBProject của workbook (đòi hỏi "Trust access to the VBA project object model" được bật)
            object vbProject = workbook.GetType().InvokeMember("VBProject", System.Reflection.BindingFlags.GetProperty, null, workbook, null);
            // Lấy collection VBComponents
            object vbComponents = vbProject.GetType().InvokeMember("VBComponents", System.Reflection.BindingFlags.GetProperty, null, vbProject, null);
            // Thêm một module tiêu chuẩn (1 = vbext_ct_StdModule)
            object module = vbComponents.GetType().InvokeMember("Add", System.Reflection.BindingFlags.InvokeMethod, null, vbComponents, new object[] { 1 });

            string vbaCode = @"
Sub ImportXMLDataWithImagesAndSort()
    Dim xmlDoc As Object
    Dim xmlNodeList As Object
    Dim xmlNode As Object
    Dim rowNum As Integer
    Dim filePath As String
    Dim imgPath As String
    Dim img As Picture
    Dim partList As Collection
    Dim partItem As Object
    Dim i As Integer
    Dim sortedPartList As Collection
    
    ' Xác định đường dẫn file XML ""xmlList.xml"" nằm cùng thư mục với file Excel hiện hành
    filePath = ThisWorkbook.Path & ""\xmlList.xml""
    
    ' Tạo đối tượng XML và tải file XML
    Set xmlDoc = CreateObject(""MSXML2.DOMDocument"")
    xmlDoc.async = False
    xmlDoc.Load filePath
    
    ' Kiểm tra lỗi khi tải file XML
    If xmlDoc.ParseError.ErrorCode <> 0 Then
        MsgBox ""Lỗi khi tải XML: "" & xmlDoc.ParseError.Reason
        Exit Sub
    End If
    
    ' Lấy danh sách các node <Part> trong file XML
    Set xmlNodeList = xmlDoc.getElementsByTagName(""Part"")
    
    ' Tạo một Collection để chứa các phần tử Part
    Set partList = New Collection
    
    ' Đọc dữ liệu từ XML và thêm vào Collection
    For Each xmlNode In xmlNodeList
        Dim part As Object
        Set part = CreateObject(""Scripting.Dictionary"")
        part.Add ""PartNo"", xmlNode.SelectSingleNode(""PartNo"").Text
        part.Add ""PartName"", xmlNode.SelectSingleNode(""PartName"").Text
        part.Add ""Quantity"", xmlNode.SelectSingleNode(""Quantity"").Text
        part.Add ""Size"", xmlNode.SelectSingleNode(""Size"").Text
        part.Add ""Material"", xmlNode.SelectSingleNode(""Material"").Text
        part.Add ""Type"", xmlNode.SelectSingleNode(""Type"").Text
        part.Add ""Remark"", xmlNode.SelectSingleNode(""Remark"").Text
        part.Add ""Image"", xmlNode.SelectSingleNode(""Image"").Text
        partList.Add part
    Next xmlNode
    
    ' Sắp xếp Collection theo PartNo (theo thứ tự tăng dần)
    Set sortedPartList = New Collection
    Do While partList.Count > 0
        Dim minPart As Object
        Dim minIndex As Integer
        Dim minPartNo As String
        minPartNo = """"
        For i = 1 To partList.Count
            Set partItem = partList.Item(i)
            If minPartNo = """" Or partItem(""PartNo"") < minPartNo Then
                minPartNo = partItem(""PartNo"")
                minIndex = i
            End If
        Next i
        Set minPart = partList.Item(minIndex)
        sortedPartList.Add minPart
        partList.Remove minIndex
    Loop
    
    ' Ghi tiêu đề cho các cột, bắt đầu từ dòng 4 (A4, B4, C4, …)
    With ThisWorkbook.Sheets(1)
        .Cells(4, 1).Value = ""PartNo""
        .Cells(4, 2).Value = ""PartName""
        .Cells(4, 3).Value = ""Quantity""
        .Cells(4, 4).Value = ""Size""
        .Cells(4, 5).Value = ""Material""
        .Cells(4, 6).Value = ""Type""
        .Cells(4, 7).Value = ""Remark""
        .Cells(4, 8).Value = ""Image""
    End With
    
    ' Điền dữ liệu vào bảng tính, bắt đầu từ dòng 5
    rowNum = 5
    For Each partItem In sortedPartList
        With ThisWorkbook.Sheets(1)
            .Cells(rowNum, 1).Value = partItem(""PartNo"")
            .Cells(rowNum, 2).Value = partItem(""PartName"")
            .Cells(rowNum, 3).Value = partItem(""Quantity"")
            .Cells(rowNum, 4).Value = partItem(""Size"")
            .Cells(rowNum, 5).Value = partItem(""Material"")
            .Cells(rowNum, 6).Value = partItem(""Type"")
            .Cells(rowNum, 7).Value = partItem(""Remark"")
            imgPath = partItem(""Image"")
            If Len(Dir(imgPath)) > 0 Then
                Dim shp As Shape
                For Each shp In .Shapes
                    If shp.TopLeftCell.Address = .Cells(rowNum, 8).Address Then
                        shp.Delete
                    End If
                Next shp
                Set img = .Pictures.Insert(imgPath)
                img.ShapeRange.LockAspectRatio = msoFalse
                img.Left = .Cells(rowNum, 8).Left
                img.Top = .Cells(rowNum, 8).Top
                img.Width = .Cells(rowNum, 8).Width
                img.Height = .Cells(rowNum, 8).Height
            End If
        End With
        rowNum = rowNum + 1
    Next partItem
    
    MsgBox ""Dữ liệu đã được nhập vào Excel thành công!""
End Sub
";

            // Lấy đối tượng CodeModule của module vừa thêm và gọi AddFromString để chèn VBA code
            object codeModule = module.GetType().InvokeMember("CodeModule", System.Reflection.BindingFlags.GetProperty, null, module, null);
            codeModule.GetType().InvokeMember("AddFromString", System.Reflection.BindingFlags.InvokeMethod, null, codeModule, new object[] { vbaCode });

            // --- Lưu workbook ---
            // 52 tương ứng với xlOpenXMLWorkbookMacroEnabled
            workbook.GetType().InvokeMember("SaveAs", System.Reflection.BindingFlags.InvokeMethod, null, workbook, new object[] { filePath, 52 });

            // --- Chạy macro ---
            excelType.InvokeMember("Run", System.Reflection.BindingFlags.InvokeMethod, null, excelApp, new object[] { "ImportXMLDataWithImagesAndSort" });

            // Hiển thị Excel cho người dùng
            excelType.InvokeMember("Visible", System.Reflection.BindingFlags.SetProperty, null, excelApp, new object[] { true });
        }

        [STAThread]
        public static void Main()
        {
            Application.EnableVisualStyles();
            Application.Run(new MainForm());
        }
    }
}
