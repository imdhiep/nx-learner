using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using NXOpen;

namespace ExcelAutomationApp
{
    public class MainForm : Form
    {
        private Button btnRun;

        public MainForm()
        {
            this.Text = "Excel Automation";
            this.Width = 300;
            this.Height = 200;

            btnRun = new Button();
            btnRun.Text = "Sửa file Excel có sẵn với VBA";
            btnRun.AutoSize = true;
            btnRun.Location = new System.Drawing.Point(50, 50);
            btnRun.Click += BtnRun_Click;
            this.Controls.Add(btnRun);
        }

        private void BtnRun_Click(object sender, EventArgs e)
        {
            // Không dùng catch ở đây, vì bên trong CreateExcelWithVBA đã xử lý lỗi (giải phóng tài nguyên)
            // Nếu có lỗi, CreateExcelWithVBA sẽ tự return.
            Session theSession = Session.GetSession();
            string partFullPath = theSession.Parts.Work.FullPath;
            string folderPath = Path.GetDirectoryName(partFullPath);

            string destFileName = "BOM List.xls";  // ở đây giữ định dạng .xls
            string destFilePath = Path.Combine(folderPath, destFileName);

            CreateExcelWithVBA(destFilePath);

            MessageBox.Show("File Excel đã được copy, chỉnh sửa và macro đã chạy thành công.",
                            "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        /// <summary>
        /// Copy file Excel nguồn, chèn mã VBA (được load từ file ngoài) và chạy macro.
        /// Nếu gặp lỗi, sẽ giải phóng tài nguyên và return.
        /// </summary>
        /// <param name="destFilePath">Đường dẫn file Excel đích sẽ được lưu</param>
        private void CreateExcelWithVBA(string destFilePath)
        {
            // Khai báo các đối tượng COM cần sử dụng
            object excelApp = null;
            object workbooks = null;
            object workbook = null;
            object vbProject = null;
            object vbComponents = null;
            object module = null;
            object codeModule = null;
            bool errorOccurred = false;

            try
            {
                // Đường dẫn file Excel nguồn (đã có sẵn)
                string sourceFile = @"E:\UG-CODE1\0 Code Libary\cs\Develop\Part_PartList\Excel\BOM List.xls";
                if (!File.Exists(sourceFile))
                    throw new Exception("Không tìm thấy file Excel nguồn: " + sourceFile);

                // Copy file nguồn sang thư mục đích (ghi đè nếu file đã tồn tại)
                File.Copy(sourceFile, destFilePath, true);

                // Lấy type của Excel Application qua ProgID
                Type excelType = Type.GetTypeFromProgID("Excel.Application");
                if (excelType == null)
                    throw new Exception("Không tìm thấy Excel. Hãy đảm bảo rằng Excel đã được cài đặt.");

                // Tạo instance của Excel Application
                excelApp = Activator.CreateInstance(excelType);

                // Ẩn Excel trong quá trình xử lý
                excelType.InvokeMember("Visible", System.Reflection.BindingFlags.SetProperty, null, excelApp, new object[] { false });

                // Mở file Excel đã copy
                workbooks = excelType.InvokeMember("Workbooks", System.Reflection.BindingFlags.GetProperty, null, excelApp, null);
                workbook = workbooks.GetType().InvokeMember("Open", System.Reflection.BindingFlags.InvokeMethod, null, workbooks, new object[] { destFilePath });

                // --- Chèn mã VBA ---
                // Lấy VBProject của workbook (yêu cầu "Trust access to the VBA project object model" đã được bật)
                vbProject = workbook.GetType().InvokeMember("VBProject", System.Reflection.BindingFlags.GetProperty, null, workbook, null);
                // Lấy collection VBComponents
                vbComponents = vbProject.GetType().InvokeMember("VBComponents", System.Reflection.BindingFlags.GetProperty, null, vbProject, null);
                // Thêm một module tiêu chuẩn (1 tương ứng với vbext_ct_StdModule)
                module = vbComponents.GetType().InvokeMember("Add", System.Reflection.BindingFlags.InvokeMethod, null, vbComponents, new object[] { 1 });

                // --- Load mã VBA từ file bên ngoài ---
                string vbaCodeFile = @"E:\UG-CODE1\0 Code Libary\cs\Develop\Part_PartList\Excel\VBA_ImportXML.txt";
                if (!File.Exists(vbaCodeFile))
                    throw new Exception("Không tìm thấy file VBA_ImportXML.txt tại: " + vbaCodeFile);
                string vbaCode = File.ReadAllText(vbaCodeFile);

                // Lấy đối tượng CodeModule của module vừa thêm và chèn mã VBA
                codeModule = module.GetType().InvokeMember("CodeModule", System.Reflection.BindingFlags.GetProperty, null, module, null);
                codeModule.GetType().InvokeMember("AddFromString", System.Reflection.BindingFlags.InvokeMethod, null, codeModule, new object[] { vbaCode });

                // --- Lưu workbook lại ---
                object missing = Type.Missing;
                object fileFormat = 52; // 52 tương ứng với xlOpenXMLWorkbookMacroEnabled
                object[] saveAsParams = new object[] {
                    destFilePath,
                    fileFormat,
                    missing,
                    missing,
                    missing,
                    missing,
                    1, // XlSaveAsAccessMode.xlNoChange (hoặc 1)
                    missing,
                    missing,
                    missing,
                    missing,
                    missing
                };
                workbook.GetType().InvokeMember("SaveAs", System.Reflection.BindingFlags.InvokeMethod, null, workbook, saveAsParams);

                // --- Chạy macro ---
                excelType.InvokeMember("Run", System.Reflection.BindingFlags.InvokeMethod, null, excelApp, new object[] { "ImportXML" });

                // Hiển thị Excel cho người dùng
                excelType.InvokeMember("Visible", System.Reflection.BindingFlags.SetProperty, null, excelApp, new object[] { true });
            }
            catch (Exception ex)
            {
                // Nếu có lỗi, đánh dấu flag và hiển thị thông báo lỗi (hoặc có thể ghi log)
                errorOccurred = true;
                MessageBox.Show("Lỗi trong CreateExcelWithVBA: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            finally
            {
                // Nếu có lỗi xảy ra, giải phóng các đối tượng COM để tránh rò rỉ tài nguyên
                if (errorOccurred)
                {
                    if (codeModule != null) { Marshal.ReleaseComObject(codeModule); codeModule = null; }
                    if (module != null) { Marshal.ReleaseComObject(module); module = null; }
                    if (vbComponents != null) { Marshal.ReleaseComObject(vbComponents); vbComponents = null; }
                    if (vbProject != null) { Marshal.ReleaseComObject(vbProject); vbProject = null; }
                    if (workbook != null) { Marshal.ReleaseComObject(workbook); workbook = null; }
                    if (workbooks != null) { Marshal.ReleaseComObject(workbooks); workbooks = null; }
                    if (excelApp != null) { Marshal.ReleaseComObject(excelApp); excelApp = null; }
                }
            }
        }

        [STAThread]
        public static void Main()
        {
            Application.EnableVisualStyles();
            Application.Run(new MainForm());
        }
    }
}
