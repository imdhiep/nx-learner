using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using NXOpen;
using NXOpen.UF;


namespace ChangeColorOfSelectedFaces
{
    static class Program
    {
        public static Session theSession = Session.GetSession();

        [STAThread]
        public static void Main()
        {
            Application.EnableVisualStyles();
            Application.Run(new ColorForm());
        }
    }

    public class ColorForm : Form
    {
        private List<CheckBox> faceCheckBoxes = new List<CheckBox>();
        private List<Panel> faceColorPanels = new List<Panel>();

        private Dictionary<string, int> colorMapFace = new Dictionary<string, int>
        {
            { "Modification", 186 },
            { "Precision Face", 181 },
            { "Datum Face", 103 },
            { "3D Face", 108 }
        };

        // Biến theo dõi trạng thái đang chọn đối tượng
        private bool isSelectingObjects = false;

        public ColorForm()
        {
            this.Text = "Select Material Color";
            this.Size = new Size(350, 480);
            this.StartPosition = FormStartPosition.Manual;
            this.TopMost = true;
            this.BackColor = Color.White;

            // Lấy màn hình bên phải nhất
            Screen rightmostScreen = Screen.AllScreens[0];
            foreach (Screen scr in Screen.AllScreens)
            {
                if (scr.Bounds.Right > rightmostScreen.Bounds.Right)
                    rightmostScreen = scr;
            }

            int formX = rightmostScreen.Bounds.Right - this.Width;
            int formY = (rightmostScreen.Bounds.Height - this.Height) / 2;
            formX = formX - (int)(this.Width / 1.2); // Lùi lại một chút
            this.Location = new System.Drawing.Point(formX, formY);

            // Tạo các checkbox và panel màu cho Face
            int yPos = 20;
            foreach (KeyValuePair<string, int> kvp in colorMapFace)
            {
                CheckBox checkBox = new CheckBox();
                checkBox.Text = kvp.Key;
                checkBox.Location = new System.Drawing.Point(20, yPos);
                checkBox.ForeColor = Color.Black;
                checkBox.AutoSize = true;
                checkBox.CheckedChanged += FaceCheckBox_CheckedChanged;

                Panel colorPanel = new Panel();
                colorPanel.BackColor = GetColorFromCode(kvp.Value);
                colorPanel.Location = new System.Drawing.Point(120, yPos - 2);
                colorPanel.Size = new Size(20, 20);

                this.Controls.Add(checkBox);
                this.Controls.Add(colorPanel);

                faceCheckBoxes.Add(checkBox);
                faceColorPanels.Add(colorPanel);

                yPos += 30;
            }

            this.FormClosing += ColorForm_FormClosing;
        }

        private void FaceCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox checkBox = sender as CheckBox;
            if (checkBox != null && checkBox.Checked)
            {
                int colorCode = colorMapFace[checkBox.Text];
                ToggleCheckBoxes(false);
                SelectFacesAndApplyColor(colorCode);
                checkBox.Checked = false;
            }
        }

        private void ToggleCheckBoxes(bool enable)
        {
            foreach (CheckBox cb in faceCheckBoxes)
            {
                cb.Enabled = enable;
            }
        }

        private void ColorForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (isSelectingObjects)
            {
                MessageBox.Show("Hmmm ~ Đóng cửa sổ Selection trước nhé!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                e.Cancel = true;
            }
        }

        private void SelectFacesAndApplyColor(int colorCode)
        {
            NXObject[] selectedFaces;
            if (SelectFaces(out selectedFaces))
            {
                foreach (NXObject selectedFace in selectedFaces)
                {
                    DisplayableObject displayableObject = selectedFace as DisplayableObject;
                    if (displayableObject != null)
                    {
                        DisplayModification displayModification = Program.theSession.DisplayManager.NewDisplayModification();
                        displayModification.ApplyToAllFaces = true;
                        displayModification.NewColor = colorCode;
                        displayModification.Apply(new DisplayableObject[] { displayableObject });
                        displayModification.Dispose();
                    }
                }
            }
        }

        private bool SelectFaces(out NXObject[] selectedObjects)
        {
            selectedObjects = null;
            isSelectingObjects = true;
            UI ui = UI.GetUI();
            string message = "Chọn Faces. Có thể chọn nhiều Faces 1 lúc trong Part hoặc Assembly";
            string title = "SELECT FACES";
            Selection.SelectionScope scope = Selection.SelectionScope.AnyInAssembly;
            bool keepHighlighted = false;
            bool includeFeatures = false;
            Selection.Response response;
            Selection.SelectionAction selectionAction = Selection.SelectionAction.ClearAndEnableSpecific;

            // Tạo mask để chỉ chọn Face
            Selection.MaskTriple[] selectionMaskArray = new Selection.MaskTriple[2];
            selectionMaskArray[0] = CreateMask(UFConstants.UF_component_type, UFConstants.UF_component_subtype, UFConstants.UF_UI_SEL_FEATURE_ANY_FACE);
            selectionMaskArray[1] = CreateMask(UFConstants.UF_face_type, 0, UFConstants.UF_UI_SEL_FEATURE_ANY_FACE);

            response = ui.SelectionManager.SelectObjects(message, title, scope, selectionAction, includeFeatures, keepHighlighted, selectionMaskArray, out selectedObjects);

            isSelectingObjects = false;
            ToggleCheckBoxes(true);

            return response != Selection.Response.Cancel && response != Selection.Response.Back;
        }

        private Selection.MaskTriple CreateMask(int type, int subtype, int faceSubtype)
        {
            Selection.MaskTriple mask = new Selection.MaskTriple();
            mask.Type = type;
            mask.Subtype = subtype;
            mask.SolidBodySubtype = faceSubtype;
            return mask;
        }

        private Color GetColorFromCode(int colorCode)
        {
            switch (colorCode)
            {
                case 186:
                    return Color.Red;
                case 181:
                    return Color.DeepPink;
                case 103:
                    return Color.DodgerBlue;
                case 108:
                    return Color.Green;
                default:
                    return Color.Black;
            }
        }

        // Hàm này có thể được gọi bởi NX khi unload
        public int GetUnloadOption(string dummy)
        {
            return NXOpen.UF.UFConstants.UF_UNLOAD_IMMEDIATELY;
        }
    }
}
