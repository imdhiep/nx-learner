using System;
using NXOpen;
using NXOpen.UF;

public class NXJournal
{
    public static void Main(string[] args)
    {
        // Khởi tạo phiên làm việc và các đối tượng cần thiết
        Session theSession = Session.GetSession(); // Tạo session
        ListingWindow lw = theSession.ListingWindow; // Khởi tạo biến lưu trữ ListingWindow

        // Chọn các đối tượng Body
        NXObject[] selectedObjects = null;
        if (SelectBodies(out selectedObjects))
        {
            // Tính toán Bounding box cho các đối tượng đã chọn
            UFSession ufs = UFSession.GetUFSession();
            NXOpen.Tag csys = NXOpen.Tag.Null;
            double[] min_corner = new double[3];
            double[,] directions = new double[3, 3]; // Đã sửa lại kích thước thành 3x3
            double[] distances = new double[3];

            ufs.Csys.AskWcs(out csys);
            ufs.Modl.AskBoundingBoxExact(selectedObjects[0].Tag, csys, min_corner, directions, distances);

            // Hiển thị kết quả trong ListingWindow
            lw.Open();
            lw.WriteLine(String.Format("Bounding Size:  X{0:F2}  Y{1:F2}  Z{2:F2}", distances[0], distances[1], distances[2]));
            lw.WriteLine("_________________________________________________");
            lw.Close();
        }
    }

    // Hàm SelectBodies cho phép người dùng chọn nhiều đối tượng Body
    public static bool SelectBodies(out NXObject[] selectedObjects)
    {
        selectedObjects = null;
        UI ui = UI.GetUI();
        string message = "Chọn Bodies. Có thể chọn nhiều Bodies trong Part hoặc Assembly";
        string title = "SELECT BODIES";
        Selection.SelectionScope scope = Selection.SelectionScope.AnyInAssembly;
        bool keepHighlighted = false;
        bool includeFeatures = false;
        Selection.Response response;
        Selection.SelectionAction selectionAction = Selection.SelectionAction.ClearAndEnableSpecific;

        // Tạo selection mask cho các body
        Selection.MaskTriple[] selectionMaskArray = new Selection.MaskTriple[1];
        selectionMaskArray[0] = CreateMask(UFConstants.UF_solid_type, 0, UFConstants.UF_UI_SEL_FEATURE_SOLID_BODY);

        response = ui.SelectionManager.SelectObjects(message, title, scope, selectionAction, includeFeatures, keepHighlighted, selectionMaskArray, out selectedObjects);

        return response != Selection.Response.Cancel && response != Selection.Response.Back;
    }

    // Hàm CreateMask tạo bộ lọc cho đối tượng Body
    public static Selection.MaskTriple CreateMask(int type, int subtype, int solidBodySubtype)
    {
        Selection.MaskTriple mask = new Selection.MaskTriple();
        mask.Type = type;
        mask.Subtype = subtype;
        mask.SolidBodySubtype = solidBodySubtype;
        return mask;
    }

    // Phương thức giải phóng tài nguyên
    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}

/* Không dùng Mask
using System;
using NXOpen;
using NXOpen.UF;

public class NXJournal
{
    public static void Main(string[] args)
    {
        // Khởi tạo phiên làm việc và các đối tượng cần thiết
        Session theSession = Session.GetSession(); // Tạo session
        ListingWindow lw = theSession.ListingWindow; // Khởi tạo biến lưu trữ ListingWindow

        // Chọn các đối tượng Body
        NXObject[] selectedObjects = null;
        if (SelectBodies(out selectedObjects))
        {
            // Tính toán Bounding box cho các đối tượng đã chọn
            UFSession ufs = UFSession.GetUFSession();
            NXOpen.Tag csys = NXOpen.Tag.Null;
            double[] min_corner = new double[3];
            double[,] directions = new double[3, 3]; // Đã sửa lại kích thước thành 3x3
            double[] distances = new double[3];

            ufs.Csys.AskWcs(out csys);
            ufs.Modl.AskBoundingBoxExact(selectedObjects[0].Tag, csys, min_corner, directions, distances);

            // Hiển thị kết quả trong ListingWindow
            lw.Open();
            lw.WriteLine(String.Format("Bounding Size:  X{0:F2}  Y{1:F2}  Z{2:F2}", distances[0], distances[1], distances[2]));
            lw.WriteLine("_________________________________________________");
            lw.Close();
        }
    }

    // Hàm SelectBodies cho phép người dùng chọn nhiều đối tượng Body
    public static bool SelectBodies(out NXObject[] selectedObjects)
    {
        selectedObjects = null;
        UI ui = UI.GetUI();
        string message = "Chọn Bodies. Có thể chọn nhiều Bodies trong Part hoặc Assembly";
        string title = "SELECT BODIES";
        Selection.SelectionScope scope = Selection.SelectionScope.AnyInAssembly;
        bool keepHighlighted = false;
        bool includeFeatures = false;
        Selection.Response response;
        Selection.SelectionAction selectionAction = Selection.SelectionAction.ClearAndEnableSpecific;

        // Không cần sử dụng mask, chỉ chọn đối tượng Body
        Selection.MaskTriple[] selectionMaskArray = new Selection.MaskTriple[1];
        selectionMaskArray[0] = new Selection.MaskTriple()
        {
            Type = UFConstants.UF_solid_type,
            Subtype = 0,
            SolidBodySubtype = UFConstants.UF_UI_SEL_FEATURE_SOLID_BODY
        };

        response = ui.SelectionManager.SelectObjects(message, title, scope, selectionAction, includeFeatures, keepHighlighted, selectionMaskArray, out selectedObjects);

        return response != Selection.Response.Cancel && response != Selection.Response.Back;
    }

    // Phương thức giải phóng tài nguyên
    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}
*/
/*
using System;
using NXOpen;
using NXOpen.UF;

public class NXJournal
{
    public static void Main(string[] args)
    {
        // Khởi tạo phiên làm việc và các đối tượng cần thiết
        Session theSession = Session.GetSession(); // Tạo session
        ListingWindow lw = theSession.ListingWindow; // Khởi tạo biến lưu trữ ListingWindow
        UI ui = UI.GetUI(); // Lấy đối tượng UI

        // Chọn các đối tượng Body
        NXObject[] selectedObjects = SelectBody(ui);
        if (selectedObjects != null && selectedObjects.Length > 0)
        {
            // Tính toán Bounding box cho các đối tượng đã chọn
            UFSession ufs = UFSession.GetUFSession();
            NXOpen.Tag csys = NXOpen.Tag.Null;
            double[] min_corner = new double[3];
            double[,] directions = new double[3, 3]; // Đã sửa lại kích thước thành 3x3
            double[] distances = new double[3];

            ufs.Csys.AskWcs(out csys);
            ufs.Modl.AskBoundingBoxExact(selectedObjects[0].Tag, csys, min_corner, directions, distances);

            // Hiển thị kết quả trong ListingWindow
            lw.Open();
            lw.WriteLine(String.Format("Bounding Size:  X{0:F2}  Y{1:F2}  Z{2:F2}", distances[0], distances[1], distances[2]));
            lw.WriteLine("_________________________________________________");
            lw.Close();
        }
        else
        {
            lw.Open();
            lw.WriteLine("No body selected.");
            lw.WriteLine("_________________________________________________");
            lw.Close();
        }
    }

    // Phương thức chọn Body từ giao diện người dùng
    private static NXOpen.NXObject[] SelectBody(NXOpen.UI ui)
    {
        NXOpen.NXObject[] objects = null;

        NXOpen.Selection.MaskTriple[] maskArray = new NXOpen.Selection.MaskTriple[1];
        maskArray[0].Type = NXOpen.UF.UFConstants.UF_solid_type;
        maskArray[0].Subtype = 0;
        maskArray[0].SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_SOLID_BODY;

        NXOpen.Selection.Response response = ui.SelectionManager.SelectObjects(
            "Select body", // thông báo
            "Select a Body", // tiêu đề
            NXOpen.Selection.SelectionScope.AnyInAssembly, // phạm vi
            NXOpen.Selection.SelectionAction.ClearAndEnableSpecific, // hành động
            false,  // includeFeatures: không chọn các feature ngoài body
            false, // keepHighlighted: không giữ highlight
            maskArray, // mảng mask
            out objects // trả về đối tượng đã chọn
        );

        if (response == NXOpen.Selection.Response.Ok)
        {
            return objects;
        }

        return null; // trả về null nếu không có đối tượng nào được chọn
    }

    // Phương thức giải phóng tài nguyên
    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}
*/