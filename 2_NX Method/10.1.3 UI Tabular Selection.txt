using System;
using NXOpen;
using NXOpen.UF;

public class NXJournal
{
    // Khởi tạo session và UFSession toàn cục
    static Session theSession = Session.GetSession();
    static UFSession theUfSession = UFSession.GetUFSession();  // Khai báo theUfSession ở đây

    // Phương thức Main là điểm khởi đầu của chương trình
    public static void Main(string[] args)
    {
        // Khởi tạo Part (có thể bỏ qua nếu chỉ dùng ListingWindow)
        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;

        // Khởi tạo ListingWindow
        ListingWindow lw = theSession.ListingWindow;
        lw.Open();

        // Khởi tạo Tag cho Tabular Note
        Tag tabularNote = Tag.Null;

        // Gọi phương thức chọn Tabular Note
        if (SelectTabularNote(out tabularNote) != Selection.Response.Ok)
        {
            // Nếu không chọn được bảng
            lw.WriteLine("Không chọn được Tabular Note.");
            lw.Close();
            return;
        }

        // Tiến hành các thao tác với bảng sau khi đã chọn...
        lw.WriteLine("Đã chọn được Tabular Note.");
        lw.Close();
    }

    // Phương thức để chọn Tabular Note
    public static Selection.Response SelectTabularNote(out Tag tabularNote)
    {
        string message = "Select a tabular note";
        string title = "Select a tabular note";
        int scope = UFConstants.UF_UI_SEL_SCOPE_ANY_IN_ASSEMBLY;
        int response = 0;
        Tag obj = Tag.Null;
        Tag view = Tag.Null;
        double[] cursor = new double[3];
        UFUi.SelInitFnT ip = new UFUi.SelInitFnT(InitProc);

        // Đảm bảo rằng khóa truy cập được giữ
        theUfSession.Ui.LockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);

        try
        {
            // Sử dụng 'out' cho response, tabularNote và view
            theUfSession.Ui.SelectWithSingleDialog(
                message, 
                title, 
                scope, 
                ip, 
                IntPtr.Zero, 
                out response,          // 'out' cho response
                out tabularNote,       // 'out' cho tabularNote
                cursor, 
                out view);             // 'out' cho view
        }
        finally
        {
            // Giải phóng khóa truy cập
            theUfSession.Ui.UnlockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);
        }

        if (response != UFConstants.UF_UI_OBJECT_SELECTED)
        {
            return Selection.Response.Cancel;
        }
        else
        {
            return Selection.Response.Ok;
        }
    }

    // Hàm khởi tạo filter cho việc lựa chọn
    public static int InitProc(IntPtr select_, IntPtr userdata)
    {
        int numTriples = 1;
        UFUi.Mask[] maskTriples = new UFUi.Mask[1];

        maskTriples[0].object_type = UFConstants.UF_tabular_note_type;
        maskTriples[0].object_subtype = UFConstants.UF_tabular_note_section_subtype;
        maskTriples[0].solid_type = 0;

        theUfSession.Ui.SetSelMask(select_, UFUi.SelMaskAction.SelMaskClearAndEnableSpecific, numTriples, maskTriples);
        return UFConstants.UF_UI_SEL_SUCCESS;
    }

    // Phương thức giúp hệ thống đóng thư viện khi không sử dụng nữa
    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}

/* Type Class
using System;
using NXOpen;
using NXOpen.UF;

public class NXJournal
{
    static Session theSession = Session.GetSession();
    static UFSession theUfSession = UFSession.GetUFSession();

    public static void Main(string[] args)
    {
        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;

        ListingWindow lw = theSession.ListingWindow;
        lw.Open();

        Tag tabularNote = Tag.Null;

        if (TabularNoteSelector.SelectTabularNote(out tabularNote) != Selection.Response.Ok)
        {
            lw.WriteLine("Không chọn được Tabular Note.");
            lw.Close();
            return;
        }

        lw.WriteLine("Đã chọn được Tabular Note.");
        lw.Close();
    }

    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}

public class TabularNoteSelector
{
    private static UFSession theUfSession = UFSession.GetUFSession();

    public static Selection.Response SelectTabularNote(out Tag tabularNote)
    {
        string message = "Select a tabular note";
        string title = "Select a tabular note";
        int scope = UFConstants.UF_UI_SEL_SCOPE_ANY_IN_ASSEMBLY;
        int response = 0;
        Tag obj = Tag.Null;
        Tag view = Tag.Null;
        double[] cursor = new double[3];
        UFUi.SelInitFnT ip = new UFUi.SelInitFnT(InitProc);

        theUfSession.Ui.LockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);

        try
        {
            theUfSession.Ui.SelectWithSingleDialog(
                message, 
                title, 
                scope, 
                ip, 
                IntPtr.Zero, 
                out response,          
                out tabularNote,       
                cursor, 
                out view);             
        }
        finally
        {
            theUfSession.Ui.UnlockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);
        }

        if (response != UFConstants.UF_UI_OBJECT_SELECTED)
        {
            return Selection.Response.Cancel;
        }
        else
        {
            return Selection.Response.Ok;
        }
    }

    private static int InitProc(IntPtr select_, IntPtr userdata)
    {
        int numTriples = 1;
        UFUi.Mask[] maskTriples = new UFUi.Mask[1];

        maskTriples[0].object_type = UFConstants.UF_tabular_note_type;
        maskTriples[0].object_subtype = UFConstants.UF_tabular_note_section_subtype;
        maskTriples[0].solid_type = 0;

        theUfSession.Ui.SetSelMask(select_, UFUi.SelMaskAction.SelMaskClearAndEnableSpecific, numTriples, maskTriples);
        return UFConstants.UF_UI_SEL_SUCCESS;
    }
}

*/

/*With Form
using System;
using NXOpen;
using NXOpen.UF;
using System.Windows.Forms;

public class FormApp : Form
{
    private NXOpen.Session theSession;
    private NXOpen.UI theUI;
    private Button btSelect;
    private Label lblMessage;

    public FormApp()
    {
        theSession = NXOpen.Session.GetSession();
        theUI = NXOpen.UI.GetUI();
        
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        btSelect = new Button();
        lblMessage = new Label();

        btSelect.Location = new System.Drawing.Point(100, 100);
        btSelect.Name = "btSelect";
        btSelect.Size = new System.Drawing.Size(120, 23);
        btSelect.Text = "Select";
        btSelect.Click += new EventHandler(HandleSelectClick);

        lblMessage.Location = new System.Drawing.Point(100, 150);
        lblMessage.Name = "lblMessage";
        lblMessage.Size = new System.Drawing.Size(200, 23);
        lblMessage.Text = "Message";

        ClientSize = new System.Drawing.Size(284, 261);
        Controls.Add(btSelect);
        Controls.Add(lblMessage);
        Name = "FormApp";
        Text = "FormApp";
    }

    private void HandleSelectClick(object sender, EventArgs e)
    {
        Tag tabularNote;
        var response = TabularNoteSelector.SelectTabularNote(out tabularNote);
        if (response == Selection.Response.Ok)
        {
            lblMessage.Text = "Tabular Note selected!";
        }
        else
        {
            lblMessage.Text = "No Tabular Note selected.";
        }
    }

    private void HandleTranslucency(bool value)
    {
        theUI.VisualizationVisualPreferences.Translucency = value;
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        Application.Run(new FormApp());
    }

    public static int GetUnloadOption(string dummy) 
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately; 
    }
}


public class TabularNoteSelector
{
    private static UFSession theUfSession = UFSession.GetUFSession();

    public static Selection.Response SelectTabularNote(out Tag tabularNote)
    {
        string message = "Select a tabular note";
        string title = "Select a tabular note";
        int scope = UFConstants.UF_UI_SEL_SCOPE_ANY_IN_ASSEMBLY;
        int response = 0;
        Tag obj = Tag.Null;
        Tag view = Tag.Null;
        double[] cursor = new double[3];
        UFUi.SelInitFnT ip = new UFUi.SelInitFnT(InitProc);

        theUfSession.Ui.LockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);

        try
        {
            theUfSession.Ui.SelectWithSingleDialog(
                message, 
                title, 
                scope, 
                ip, 
                IntPtr.Zero, 
                out response,          
                out tabularNote,       
                cursor, 
                out view);             
        }
        finally
        {
            theUfSession.Ui.UnlockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);
        }

        if (response != UFConstants.UF_UI_OBJECT_SELECTED)
        {
            return Selection.Response.Cancel;
        }
        else
        {
            return Selection.Response.Ok;
        }
    }

    private static int InitProc(IntPtr select_, IntPtr userdata)
    {
        int numTriples = 1;
        UFUi.Mask[] maskTriples = new UFUi.Mask[1];

        maskTriples[0].object_type = UFConstants.UF_tabular_note_type;
        maskTriples[0].object_subtype = UFConstants.UF_tabular_note_section_subtype;
        maskTriples[0].solid_type = 0;

        theUfSession.Ui.SetSelMask(select_, UFUi.SelMaskAction.SelMaskClearAndEnableSpecific, numTriples, maskTriples);
        return UFConstants.UF_UI_SEL_SUCCESS;
    }
}

*/
/* Fill Table
using System;
using NXOpen;
using NXOpen.UF;
using System.Windows.Forms;
using System.Collections.Generic;

public class FormApp : Form
{
    private NXOpen.Session theSession;
    private NXOpen.UI theUI;
    private Button btWrite;
    private Label lblMessage;

    public FormApp()
    {
        theSession = NXOpen.Session.GetSession();
        theUI = NXOpen.UI.GetUI();
        
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        btWrite = new Button();
        lblMessage = new Label();

        btWrite.Location = new System.Drawing.Point(100, 100);
        btWrite.Name = "btWrite";
        btWrite.Size = new System.Drawing.Size(120, 23);
        btWrite.Text = "Write";
        btWrite.Click += new EventHandler(HandleWriteClick);

        lblMessage.Location = new System.Drawing.Point(100, 150);
        lblMessage.Name = "lblMessage";
        lblMessage.Size = new System.Drawing.Size(200, 23);
        lblMessage.Text = "Message";

        ClientSize = new System.Drawing.Size(284, 261);
        Controls.Add(btWrite);
        Controls.Add(lblMessage);
        Name = "FormApp";
        Text = "Tabular Note Writer";
    }

    private void HandleWriteClick(object sender, EventArgs e)
    {
        try
        {
            // Call method to update tabular note
            TabularNoteUpdater.UpdateTabularNote();
            lblMessage.Text = "Data written to the table successfully!";
        }
        catch (Exception ex)
        {
            lblMessage.Text = "Error: {ex.Message}";
        }
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        Application.Run(new FormApp());
    }

    public static int GetUnloadOption(string dummy) 
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately; 
    }
}

public class TabularNoteUpdater
{
    private static Session theSession = NXOpen.Session.GetSession();
    private static UFSession theUfSession = UFSession.GetUFSession();

    public static void UpdateTabularNote()
    {
        const int rowNumber = 1;
        const int startColumn = 1;

        Tag myTableTag = Tag.Null;
        Tag myTableSection = Tag.Null;

        if (theSession.Parts.Work == null)
        {
            throw new Exception("No active part found.");
        }

        ListingWindow lw = theSession.ListingWindow;
        lw.Open();

        const string undoMarkName = "NXJ journal";
        Session.UndoMarkId markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, undoMarkName);

        // Directly assigning values to variables (e.g., "A", "B", etc.)
        Dictionary<int, string> values = new Dictionary<int, string>
        {
            {1, "A"},
            {2, "B"},
            {3, "C"},
            {4, "D"},
            {5, "E"},
            {6, "F"}
        };

        // Select a tabular note
        Tag tabularNote = Tag.Null;
        if (TabularNoteSelector.SelectTabularNote(ref tabularNote) != Selection.Response.Ok)
        {
            lw.WriteLine("No tabular note selected.");
            throw new Exception("No tabular note selected.");
        }

        theUfSession.Tabnot.AskTabularNoteOfSection(tabularNote, out myTableTag);

        // Read the number of columns and rows of the table
        int numCols;
        theUfSession.Tabnot.AskNmColumns(myTableTag, out numCols);
        if (numCols < startColumn)
        {
            lw.WriteLine("Selected table has fewer columns than required.");
            throw new Exception("Selected table has fewer columns than required.");
        }

        int numRows;
        theUfSession.Tabnot.AskNmRows(myTableTag, out numRows);
        if (numRows < rowNumber)
        {
            lw.WriteLine("Selected table has fewer rows than required.");
            throw new Exception("Selected table has fewer rows than required.");
        }

        Tag rowTag = Tag.Null;
        theUfSession.Tabnot.AskNthRow(myTableTag, rowNumber - 1, out rowTag);
        if (rowTag == Tag.Null)
        {
            lw.WriteLine("Row not found.");
            throw new Exception("Row not found.");
        }

        // Fill in the values into the table
        for (int colIndex = startColumn; colIndex < startColumn + values.Count; colIndex++)
        {
            if (colIndex - 1 >= numCols)
            {
                break;
            }

            Tag colTag = Tag.Null;
            theUfSession.Tabnot.AskNthColumn(myTableTag, colIndex - 1, out colTag);
            if (colTag == Tag.Null)
            {
                return;
            }

            Tag myCellTag = Tag.Null;
            theUfSession.Tabnot.AskCellAtRowCol(rowTag, colTag, out myCellTag);

            // Assign value directly from the values dictionary
            string newText = values.ContainsKey(colIndex) ? values[colIndex] : "";

            if (!string.IsNullOrEmpty(newText))
            {
                theUfSession.Tabnot.SetCellText(myCellTag, newText);
            }
        }

        lw.Close();
    }
}

public class TabularNoteSelector
{
    private static UFSession theUfSession = UFSession.GetUFSession();

    public static Selection.Response SelectTabularNote(ref Tag tabularNote)
    {
        string message = "Select a tabular note";
        string title = "Select a tabular note";
        int scope = UFConstants.UF_UI_SEL_SCOPE_ANY_IN_ASSEMBLY;
        int response = 0;
        Tag obj = Tag.Null;
        Tag view = Tag.Null;
        double[] cursor = new double[3];
        UFUi.SelInitFnT ip = new UFUi.SelInitFnT(InitProc);

        theUfSession.Ui.LockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);

        try
        {
            theUfSession.Ui.SelectWithSingleDialog(
                message, 
                title, 
                scope, 
                ip, 
                IntPtr.Zero, 
                out response,          
                out tabularNote,       
                cursor, 
                out view);             
        }
        finally
        {
            theUfSession.Ui.UnlockUgAccess(UFConstants.UF_UI_FROM_CUSTOM);
        }

        if (response != UFConstants.UF_UI_OBJECT_SELECTED)
        {
            return Selection.Response.Cancel;
        }
        else
        {
            return Selection.Response.Ok;
        }
    }

    private static int InitProc(IntPtr select_, IntPtr userdata)
    {
        int numTriples = 1;
        UFUi.Mask[] maskTriples = new UFUi.Mask[1];

        maskTriples[0].object_type = UFConstants.UF_tabular_note_type;
        maskTriples[0].object_subtype = UFConstants.UF_tabular_note_section_subtype;
        maskTriples[0].solid_type = 0;

        theUfSession.Ui.SetSelMask(select_, UFUi.SelMaskAction.SelMaskClearAndEnableSpecific, numTriples, maskTriples);
        return UFConstants.UF_UI_SEL_SUCCESS;
    }
}
*/

