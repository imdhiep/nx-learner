using System;
using NXOpen;
using NXOpen.UF;

public class BodySl
{
    public static void Main(string[] args)
    {
        NXOpen.Session theSession = NXOpen.Session.GetSession();
        NXOpen.UI ui = NXOpen.UI.GetUI();

        // Khởi tạo đối tượng được chọn
        NXOpen.TaggedObject selectedObject;

        // Gọi phương thức SelectDim
        Selection.Response response = SelectDim(out selectedObject);

        if (response == Selection.Response.Ok)
        {
            // Hiển thị kết quả nếu đối tượng đã được chọn
            DisplayResult(theSession, new NXOpen.TaggedObject[] { selectedObject });
        }
        else
        {
            // Nếu không có đối tượng nào được chọn
            DisplayResult(theSession, null);
        }
    }

    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }

    private static void DisplayResult(NXOpen.Session theSession, NXOpen.TaggedObject[] selectedObjects)
    {
        // Mở cửa sổ ListingWindow của NXOpen để hiển thị thông tin
        theSession.ListingWindow.Open();

        // Kiểm tra xem có đối tượng nào đã được chọn không
        if (selectedObjects != null && selectedObjects.Length > 0)
        {
            // Duyệt qua từng đối tượng và in thông tin vào cửa sổ ListingWindow
            foreach (NXOpen.TaggedObject obj in selectedObjects)
            {
                theSession.ListingWindow.WriteLine("Selected object: " + obj.ToString());
            }
        }
        else
        {
            theSession.ListingWindow.WriteLine("No object was selected.");
        }
    }

    public static Selection.Response SelectDim(out NXOpen.TaggedObject obj)
    {
        obj = null;
        NXOpen.UI ui = NXOpen.UI.GetUI();
        Selection.Response resp = Selection.Response.Cancel;

        string prompt = "Select dimensions";
        string message = "Select dimensions";
        Selection.SelectionScope scope = Selection.SelectionScope.WorkPart;
        Selection.SelectionAction selAction = Selection.SelectionAction.ClearAndEnableSpecific;

        Selection.MaskTriple[] selectionMaskArray = new Selection.MaskTriple[1];
        selectionMaskArray[0].Type = UFConstants.UF_dimension_type;
        selectionMaskArray[0].Subtype = 0;
        selectionMaskArray[0].SolidBodySubtype = 0;

        bool includeFeatures = false;
        bool keepHighlighted = false;

        Point3d cursor = new Point3d();

        resp = ui.SelectionManager.SelectTaggedObject(
            prompt,
            message,
            scope,
            selAction,
            includeFeatures,
            keepHighlighted,
            selectionMaskArray,
            out obj,
            out cursor
        );
	   if (resp == Selection.Response.ObjectSelected || 
            resp == Selection.Response.ObjectSelectedByName)
        {
            return Selection.Response.Ok;
        }
        else
        {
            return Selection.Response.Cancel;
        }
    }
}