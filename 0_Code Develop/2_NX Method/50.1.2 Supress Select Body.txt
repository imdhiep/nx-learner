using System;
using NXOpen;

public class NXJournal
{
    public static void Main(string[] args)
    {
        NXOpen.Session theSession = NXOpen.Session.GetSession();
        NXOpen.Part workPart = theSession.Parts.Work;
        NXOpen.UI ui = NXOpen.UI.GetUI();

        // Cho phép người dùng chọn body/feature
        NXOpen.NXObject[] selectedObjects = SelectBody(ui);
        if (selectedObjects == null || selectedObjects.Length == 0)
        {
            return;
        }

        // Chuyển các đối tượng được chọn sang mảng Feature
        NXOpen.Features.Feature[] featuresToSuppress = new NXOpen.Features.Feature[selectedObjects.Length];
        for (int i = 0; i < selectedObjects.Length; i++)
        {
            featuresToSuppress[i] = selectedObjects[i] as NXOpen.Features.Feature;
            if (featuresToSuppress[i] == null)
            {
                return;
            }
        }

        // Đánh dấu undo và thực hiện ẩn (suppress) các feature được chọn
        NXOpen.Session.UndoMarkId markId = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Suppress Feature");
        workPart.Features.SuppressFeatures(featuresToSuppress);
    }



    // Phương thức SelectBody cho phép người dùng chọn body hoặc feature bằng cách sử dụng SelectionManager
    private static NXOpen.NXObject[] SelectBody(NXOpen.UI ui)
    {
        NXOpen.NXObject[] objects = null;
        NXOpen.Selection.Response response = ui.SelectionManager.SelectObjects(
            "Select body",                             // Thông điệp hiển thị
            "Select a Body",                           // Tiêu đề cửa sổ chọn
            NXOpen.Selection.SelectionScope.AnyInAssembly,  // Phạm vi chọn (trong toàn bộ assembly)
            NXOpen.Selection.SelectionAction.ClearAndEnableSpecific, // Hành động chọn
            true,                                      // includeFeatures: cho phép chọn cả feature
            false,                                     // keepHighlighted: không giữ highlighted sau khi chọn
            new NXOpen.Selection.MaskTriple[]
            {
                new NXOpen.Selection.MaskTriple
                {
                    Type = NXOpen.UF.UFConstants.UF_solid_type,
                    Subtype = 0,
                    SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_SOLID_BODY
                }
            },
            out objects);

        return response == NXOpen.Selection.Response.Ok ? objects : null;
    }

    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}
