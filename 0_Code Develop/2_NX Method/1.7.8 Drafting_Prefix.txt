using System;
using NXOpen;
using NXOpen.Annotations;
using NXOpen.UF;

public class NX85LimitsFits
{
    private static Session theSession = Session.GetSession();
    private static NXOpen.UI ui = NXOpen.UI.GetUI();
    private static UFSession ufs = UFSession.GetUFSession();
    private static Part workPart = theSession.Parts.Work;

    public static void Main()
    {
        TaggedObject selectedDim;
        Selection.Response response = SelectDim(out selectedDim);
        if (response == Selection.Response.Ok)
        {
            EditDimensionTolerance(selectedDim);
        }
    }

    private static void EditDimensionTolerance(TaggedObject selectedDim)
    {
        Session.UndoMarkId markId = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Edit Tolerance");
        
        Dimension typeDim = selectedDim as Dimension;
        if (typeDim == null)
        {
            theSession.DeleteUndoMark(markId, null);
            return;
        }

        AppendedText appendedText = workPart.Annotations.NewAppendedText();
        appendedText.SetBeforeText(new string[] { "M" });

        typeDim.SetAppendedText(appendedText);
        appendedText.Dispose();
        
        theSession.UpdateManager.DoUpdate(markId);
        theSession.DeleteUndoMark(markId, null);
    }

    public static Selection.Response SelectDim(out TaggedObject obj)
    {
        obj = null;
        Selection.Response resp;
        string prompt = "Select dimensions";
        string message = "Select dimensions";
        Selection.SelectionScope scope = Selection.SelectionScope.WorkPart;
        Selection.SelectionAction selAction = Selection.SelectionAction.ClearAndEnableSpecific;
        
        Selection.MaskTriple[] selectionMaskArray = new Selection.MaskTriple[1];
        selectionMaskArray[0].Type = UFConstants.UF_dimension_type;
        selectionMaskArray[0].Subtype = 0;
        selectionMaskArray[0].SolidBodySubtype = 0;

        bool includeFeatures = false;
        bool keepHighlighted = false;
        Point3d cursor;
        
        resp = ui.SelectionManager.SelectTaggedObject(
            prompt, message, scope, selAction, 
            includeFeatures, keepHighlighted, 
            selectionMaskArray, out obj, out cursor);
        
        return resp == Selection.Response.ObjectSelected || resp == Selection.Response.ObjectSelectedByName
            ? Selection.Response.Ok
            : Selection.Response.Cancel;
    }

    public static int GetUnloadOption(string dummy)
    {
        return (int)NXOpen.Session.LibraryUnloadOption.Immediately;
    }
}
